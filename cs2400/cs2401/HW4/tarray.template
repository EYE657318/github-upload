

#include<iostream>
using namespace std;


template<class T>
Tarray<T>::Tarray(){ 

    used = 0;
    capacity = 5;
    current_index = 0;

    data = new T[5];
}

template<class T>
void Tarray<T>::add(T item){   
    if(used == capacity){
        resize();
    }

    data[used] = item;
    used++;
    cout << "Item added." << endl;

}

template<class T> 
void Tarray<T>::start(){ 
    current_index = 0;
    cout << "Index set to start." << endl;

}

template<class T>
bool Tarray<T>::is_item()const{ 
    return(current_index < used);

}

template<class T>
void Tarray<T>::advance(){  
    current_index++;
   /* if(!is_item()){
        current_index--;
        cout << "Doesn't exist." << endl;
    }*/
}

template<class T>
T Tarray<T>::current()const{ 
    return data[current_index];

}

template<class T>
void Tarray<T>::remove_current(){ 
    for(size_t i = current_index; i < used; i++){
        data[i] = data[i+1];
    }
    used--;

}

template<class T>
void Tarray<T>::resize(){ //resizes
    T *temp;
    temp = new T[capacity+5];
    copy(data, data + used, temp);
    delete [] data;
    capacity += 5;
    data = temp;

}
